{"ast":null,"code":"// funzione helper per effettuare richieste autenticata con il token jwt\nexport async function apiFetch(url, options = {}) {\n  const response = await fetch(url, options);\n  const contentType = response.headers.get(\"content-type\");\n  if (!response.ok) {\n    // provo a leggere json, altrimenti testo\n    let errorBody;\n    try {\n      errorBody = contentType && contentType.includes(\"application/json\") ? await response.json() : await response.text();\n    } catch {\n      errorBody = await response.text();\n    }\n    throw new Error(`errore http! status: ${response.status}, body: ${JSON.stringify(errorBody)}`);\n  }\n  if (contentType && contentType.includes(\"application/json\")) {\n    return response.json();\n  } else {\n    const text = await response.text();\n    throw new Error(`risposta non-json, body: ${text}`);\n  }\n}","map":{"version":3,"names":["apiFetch","url","options","response","fetch","contentType","headers","get","ok","errorBody","includes","json","text","Error","status","JSON","stringify"],"sources":["C:/Users/AlessioLongo/OneDrive - ITS Angelo Rizzoli/Documenti/Workspace/pokemonweb/frontend/src/services/api.js"],"sourcesContent":["// funzione helper per effettuare richieste autenticata con il token jwt\r\nexport async function apiFetch(url, options = {}) {\r\n  const response = await fetch(url, options);\r\n  const contentType = response.headers.get(\"content-type\");\r\n  if (!response.ok) {\r\n    // provo a leggere json, altrimenti testo\r\n    let errorBody;\r\n    try {\r\n      errorBody = contentType && contentType.includes(\"application/json\")\r\n        ? await response.json()\r\n        : await response.text();\r\n    } catch {\r\n      errorBody = await response.text();\r\n    }\r\n    throw new Error(\r\n      `errore http! status: ${response.status}, body: ${JSON.stringify(errorBody)}`\r\n    );\r\n  }\r\n  if (contentType && contentType.includes(\"application/json\")) {\r\n    return response.json();\r\n  } else {\r\n    const text = await response.text();\r\n    throw new Error(`risposta non-json, body: ${text}`);\r\n  }\r\n}"],"mappings":"AAAA;AACA,OAAO,eAAeA,QAAQA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;EAC1C,MAAMG,WAAW,GAAGF,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;IAChB;IACA,IAAIC,SAAS;IACb,IAAI;MACFA,SAAS,GAAGJ,WAAW,IAAIA,WAAW,CAACK,QAAQ,CAAC,kBAAkB,CAAC,GAC/D,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,GACrB,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC,MAAM;MACNH,SAAS,GAAG,MAAMN,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnC;IACA,MAAM,IAAIC,KAAK,CACb,wBAAwBV,QAAQ,CAACW,MAAM,WAAWC,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC,EAC7E,CAAC;EACH;EACA,IAAIJ,WAAW,IAAIA,WAAW,CAACK,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,OAAOP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACxB,CAAC,MAAM;IACL,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAAC,4BAA4BD,IAAI,EAAE,CAAC;EACrD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}