{"ast":null,"code":"// funzione helper per effettuare richieste autenticata con il token jwt\nexport async function apiFetch(url, options = {}) {\n  // recupero il token dal localstorage\n  const token = localStorage.getItem('token');\n  // aggiungo l'header Authorization se il token è presente\n  const headers = {\n    ...options.headers,\n    ...(token ? {\n      Authorization: `Bearer ${token}`\n    } : {})\n  };\n  const res = await fetch(url, {\n    ...options,\n    headers\n  });\n  // restituisco la risposta come json\n  return res.json();\n}","map":{"version":3,"names":["apiFetch","url","options","token","localStorage","getItem","headers","Authorization","res","fetch","json"],"sources":["C:/Users/aless/Lavoro/workspace/pokemonweb/frontend/src/services/api.js"],"sourcesContent":["// funzione helper per effettuare richieste autenticata con il token jwt\r\nexport async function apiFetch(url, options = {}) {\r\n  // recupero il token dal localstorage\r\n  const token = localStorage.getItem('token');\r\n  // aggiungo l'header Authorization se il token è presente\r\n  const headers = {\r\n    ...options.headers,\r\n    ...(token ? { Authorization: `Bearer ${token}` } : {}),\r\n  };\r\n  const res = await fetch(url, { ...options, headers });\r\n  // restituisco la risposta come json\r\n  return res.json();\r\n}"],"mappings":"AAAA;AACA,OAAO,eAAeA,QAAQA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChD;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,MAAMC,OAAO,GAAG;IACd,GAAGJ,OAAO,CAACI,OAAO;IAClB,IAAIH,KAAK,GAAG;MAAEI,aAAa,EAAE,UAAUJ,KAAK;IAAG,CAAC,GAAG,CAAC,CAAC;EACvD,CAAC;EACD,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;IAAE,GAAGC,OAAO;IAAEI;EAAQ,CAAC,CAAC;EACrD;EACA,OAAOE,GAAG,CAACE,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}